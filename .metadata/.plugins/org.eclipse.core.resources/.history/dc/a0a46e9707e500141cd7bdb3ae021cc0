package sita.view;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import javax.imageio.ImageIO;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.PlainDocument;

import sita.MessagesManager;
import sita.db.DBRoute;
import sita.model.Fare;
import sita.model.Route;


public class GUIRoute {

	DBRoute dbrt = new DBRoute();
	JFrame frame = new JFrame();
	JFrame frame2 = new JFrame();
	JFrame frame3 = new JFrame();
	JLabel guiLbl = new JLabel("Description:");
	JLabel guiLbl2 = new JLabel("TariffNo:");
	JTextField txtF = new JTextField();
	JTextField txtF2 = new JTextField();
	JButton newBut = new JButton("New");
	JButton delBut = new JButton("Delete");
	JButton okayBut = new JButton("Ok");
	JButton simBut = new JButton("Yes");
	JButton naoBut = new JButton("No");
	JButton closeBut = new JButton("Close");
	JButton cancelBut = new JButton("Cancel");
	JComboBox<Integer> cmbBox = new JComboBox<Integer>();
	DefaultTableModel model;
	JTable table;
	Route route = new Route();
	Fare theFare = new Fare();
	int rowSelected;
	int idSelected;
	
	public GUIRoute() throws IOException, SQLException {
	
		// FRAMES **************************************************
		frame.setLayout (new BorderLayout ());
		frame.setSize(425,200);
		frame.setTitle("Route Table");
		frame.setResizable(false);
		frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		frame.setLocationRelativeTo(null);
		//~~~~~~~~~~
		frame2.setLayout (new BorderLayout ());
		frame2.setSize(425,150);
		frame2.setTitle("New Route");
		frame2.setResizable(false);
		frame2.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		frame2.setLocationRelativeTo(null);
		//~~~~~~~~~~
		frame3.setLayout (new BorderLayout ());
		frame3.setSize(250,70);
		frame3.setTitle("Delete Route");
		frame3.setResizable(false);
		frame3.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		frame3.setLocationRelativeTo(null);
		// ************************************************************
	
		// TXTFIELDS RESTRICTIONS ************************************
		txtF.setPreferredSize(new Dimension(100,20));
		txtF2.setPreferredSize(new Dimension(100,20));
		// **********************************************************
	
		// PANELS *****************************************************
		JPanel organize = new JPanel(new FlowLayout (FlowLayout.LEFT));
		JPanel organize2 = new JPanel(new FlowLayout (FlowLayout.LEFT));
		JPanel northPanel = new JPanel (new GridLayout (1, 1));
		JPanel welcomePanel = new JPanel (new FlowLayout (FlowLayout.LEFT));
		JPanel secondLine = new JPanel (new FlowLayout (FlowLayout.LEFT));
		JPanel middlePanel = new JPanel (new GridLayout (1, 1));
		JPanel radioPanel = new JPanel (new FlowLayout (FlowLayout.CENTER));
		JPanel radioPanel2 = new JPanel (new FlowLayout (FlowLayout.CENTER));
		JPanel radioPanel3 = new JPanel (new FlowLayout (FlowLayout.CENTER));
		JPanel geralPanel = new JPanel();
		geralPanel.setLayout(new BoxLayout (geralPanel, BoxLayout.PAGE_AXIS));
		JPanel geralPanel2 = new JPanel();
		geralPanel2.setLayout(new BoxLayout (geralPanel2, BoxLayout.PAGE_AXIS));
		JPanel geralPanel3 = new JPanel();
		geralPanel3.setLayout(new BorderLayout());
		// ************************************************************
		
		// IMAGES *********************************************************
		BufferedImage myPicture = ImageIO.read(new File("src/Cute-Ball-Go-icon.png"));
		myPicture.getScaledInstance(10, 10, Image.SCALE_DEFAULT);
		JLabel picLabel = new JLabel(new ImageIcon(myPicture));
		JLabel picLabel2 = new JLabel(new ImageIcon(myPicture));
		// ******************************************************************
		
		// TABLE *********************************************************
		model = new DefaultTableModel();
		model.addColumn("routeNo");
		model.addColumn("description");
		model.addColumn("TariffNo");
		table = new JTable(model);
		
		List<Route> listaRoute = new ArrayList<Route>();
		listaRoute = dbrt.listAllRoutes();
		
		for(Route rt:listaRoute) {
				
			model.addRow(new Object[]{rt.getRouteNo(), rt.getDescription(), rt.getTariffNo()});
		}
		// ************************************************************
		
		// SCROLL **************************************************
		JScrollPane scrollPane = new JScrollPane(table);
		table.setFillsViewportHeight(true);
		// **********************************************************
		
		// PANELS ORGANIZATION ***********************************************
		welcomePanel.add(picLabel);
		welcomePanel.add(guiLbl);
		
		secondLine.add(picLabel2);
		secondLine.add(guiLbl2);
			
		organize.add(txtF);
		organize2.add(txtF2);
			
		northPanel.add(welcomePanel);
		northPanel.add(organize);
		middlePanel.add(secondLine);
		middlePanel.add(organize2);
			
		radioPanel.add(newBut);
		radioPanel.add(delBut);
			
		radioPanel2.add(okayBut);
		
		radioPanel3.add(simBut);
		radioPanel3.add(naoBut);
			
		geralPanel.add(scrollPane);
		geralPanel.add(radioPanel);
			
		geralPanel2.add(northPanel);
		geralPanel2.add(middlePanel);
		geralPanel2.add(radioPanel2);
		
		geralPanel3.add(radioPanel3, BorderLayout.PAGE_END);
		
		frame.add(geralPanel);
		frame2.add(geralPanel2);
		frame3.add(geralPanel3);
		// *********************************************************************
		
		// BUTTONS LISTENERS ***************************************************
		newBut.addActionListener( new ActionListener() {
			
			public void actionPerformed(ActionEvent e) {
				frame2.setVisible(true);
			}
		});
		
		delBut.addActionListener( new ActionListener() {

			public void actionPerformed(ActionEvent e) {
				rowSelected = table.getSelectedRow();
				idSelected = (int) model.getValueAt(rowSelected, 0);
				boolean rowValid;
				if (rowSelected >= 0)
					rowValid = false;
				else
					rowValid = true;
				if (rowValid) {
					MessagesManager.displayErrorMessage("Selecione o Route a ser excluído!");
				}else{
					frame3.setVisible(true);
				}
				
			}
			
		});
		
		okayBut.addActionListener( new ActionListener () {
			
			public void actionPerformed(ActionEvent e) {
				
				String description = getTxtF();
				int tariffNo = Integer.parseInt(getTxtF2());
				boolean nocode = description.matches("");
				boolean noname = getTxtF2().matches("");
				if (nocode == true)
					MessagesManager.displayErrorMessage("Error: Please enter the origin!");
				else if (noname == true)
					MessagesManager.displayErrorMessage("Error: Please enter the destiny!");
				else {
					route.setDescription(description);
					route.setTariffNo(tariffNo);
					try {
						if ( dbrt.insertRoute(route) ) {
							cmbBox = GUIMenu.getCmbBox();
							cmbBox.addItem(route.getRouteNo());
							List<Route> listaRoute = new ArrayList<Route>();
							listaRoute = dbrt.listAllRoutes();
							for(Route rt:listaRoute) {
									
								model.addRow(new Object[]{rt.getRouteNo(), rt.getDescription(), rt.getTariffNo()});
							}
							MessagesManager.displaySuccessMessage("Route successfully inserted!");
						} else {
							MessagesManager.displayErrorMessage("Route cannot be inserted!");
						}
							
					} catch (SQLException exp) {
						MessagesManager.displayErrorMessage("Error inserting Route: " + exp.getMessage());
					}
					frame2.dispose();
				}
			}
		});
		
		simBut.addActionListener( new ActionListener () {
			
			public void actionPerformed(ActionEvent e) {
				try{
					if( dbrt.deleteRoute(idSelected) ){
						model.removeRow(rowSelected);
						List<Route> listaRoute = new ArrayList<Route>();
						listaRoute = dbrt.listAllRoutes();
						cmbBox = GUIMenu.getCmbBox();
						cmbBox.removeAllItems();
						cmbBox.addItem(0);
						for(Route rt:listaRoute) {
								cmbBox.addItem(rt.getRouteNo());
						}
						MessagesManager.displaySuccessMessage("Route successfully deleted!");
						frame3.dispose();
					}else{
						MessagesManager.displayErrorMessage("Route cannot be deleted!");
						frame3.dispose();
					}
						
				}catch(Exception ex){
					MessagesManager.displayErrorMessage("Error deleting Route: " + ex.getMessage());
					frame3.dispose();
				}
			}
		});
		
		naoBut.addActionListener( new ActionListener () {
			
			public void actionPerformed(ActionEvent e) {
				frame3.dispose();
			}
		});
		
		closeBut.addActionListener( new ActionListener () {

			public void actionPerformed(ActionEvent e) {
				frame.dispose();
			}
		});
		
		cancelBut.addActionListener( new ActionListener () {

			public void actionPerformed(ActionEvent e) {
				frame2.dispose();
			}
		});
	}
	// ***************************************************************************
	
	// GETS AND SETS ***************************************************************
	public String getTxtF() {
		return txtF.getText();
	}
	
	public String getTxtF2() {
		return txtF2.getText();
	}
	
	public JFrame getFrame() {
		return frame;
	}
	
	public JFrame getFrame2() {
		return frame2;
	}
	
	public DefaultTableModel getModel() {
		return model;
	}
	// ********************************************************************************
	
// limita o numero de caracteres que podem ser digitados
@SuppressWarnings("serial")
public class JTextFieldLimit extends PlainDocument {
	private int limit;

	JTextFieldLimit(int limit) {
		super();
		this.limit = limit;
	}

	public void insertString( int offset, String  str, AttributeSet attr ) 
											throws BadLocationException {
		 if (str == null) return;

		 if ((getLength() + str.length()) <= limit) {
			 super.insertString(offset, str, attr);
		  }
	}
}
	
}
